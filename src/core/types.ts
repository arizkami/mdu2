/**
 * Stream quality levels
 */
export type StreamQuality = 
  | '2160p' | '1440p' | '1080p' | '720p' | '480p' | '360p' | '240p' | '144p'
  | 'high' | 'medium' | 'low' | 'unknown';

/**
 * Audio quality levels
 */
export type AudioQuality = 'high' | 'medium' | 'low' | 'unknown';

/**
 * Video format types
 */
export type VideoFormat = 'mp4' | 'webm' | 'mkv' | 'avi' | 'mov' | 'flv' | '3gp' | 'unknown';

/**
 * Audio format types
 */
export type AudioFormat = 'mp3' | 'aac' | 'm4a' | 'ogg' | 'wav' | 'flac' | 'opus' | 'unknown';

/**
 * Information about a single stream/format
 */
export interface StreamInfo {
  /** Direct URL to the stream */
  url: string;
  
  /** Quality of the stream */
  quality: StreamQuality;
  
  /** Format/container of the stream */
  format: string;
  
  /** File size in bytes (if available) */
  fileSize?: number;
  
  /** Bitrate in bits per second */
  bitrate?: number;
  
  /** Frames per second (for video) */
  fps?: number;
  
  /** Whether this stream contains video */
  hasVideo: boolean;
  
  /** Whether this stream contains audio */
  hasAudio: boolean;
  
  /** Video resolution (e.g., "1920x1080") */
  resolution?: string;
  
  /** Video codec */
  codec?: string;
  
  /** Audio codec */
  audioCodec?: string;
  
  /** Audio quality */
  audioQuality?: string;
  
  /** Audio sample rate */
  audioSampleRate?: string;
  
  /** Number of audio channels */
  audioChannels?: number;
  
  /** Internal tag/ID used by the platform */
  itag?: number;
  
  /** Whether this is a download URL (vs streaming) */
  isDownloadUrl?: boolean;
  
  /** Whether this is audio-only stream */
  isAudioOnly?: boolean;
  
  /** Whether this is video-only stream */
  isVideoOnly?: boolean;
  
  /** Custom headers for downloading this stream */
  headers?: Record<string, string>;
  
  /** Additional metadata */
  metadata?: Record<string, any>;
}

/**
 * Complete media information
 */
export interface MediaInfo {
  /** Unique identifier for the media */
  id: string;
  
  /** Title of the media */
  title: string;
  
  /** Description of the media */
  description: string;
  
  /** Duration in seconds */
  duration: number;
  
  /** Uploader/creator name */
  uploader: string;
  
  /** Uploader profile URL */
  uploaderUrl?: string;
  
  /** View count */
  viewCount?: number;
  
  /** Like count */
  likeCount?: number;
  
  /** Dislike count */
  dislikeCount?: number;
  
  /** Comment count */
  commentCount?: number;
  
  /** Thumbnail URL */
  thumbnail: string;
  
  /** Upload date */
  uploadDate?: Date;
  
  /** Original URL that was extracted */
  originalUrl: string;
  
  /** Key identifying which extractor was used */
  extractorKey: string;
  
  /** Available streams/formats */
  streams: StreamInfo[];
  
  /** Additional metadata specific to the platform */
  metadata?: Record<string, any>;
  
  /** Tags/categories */
  tags?: string[];
  
  /** Chapters/timestamps */
  chapters?: Chapter[];
  
  /** Subtitles/captions */
  subtitles?: Subtitle[];
}

/**
 * Chapter/timestamp information
 */
export interface Chapter {
  /** Start time in seconds */
  startTime: number;
  
  /** End time in seconds */
  endTime: number;
  
  /** Chapter title */
  title: string;
  
  /** Chapter thumbnail */
  thumbnail?: string;
}

/**
 * Subtitle/caption information
 */
export interface Subtitle {
  /** Language code (e.g., "en", "es") */
  language: string;
  
  /** Language name (e.g., "English", "Spanish") */
  languageName: string;
  
  /** Subtitle URL */
  url: string;
  
  /** Subtitle format (e.g., "vtt", "srt") */
  format: string;
  
  /** Whether this is auto-generated */
  autoGenerated?: boolean;
}

/**
 * Download options
 */
export interface DownloadOptions {
  /** Preferred quality */
  quality?: StreamQuality;
  
  /** Preferred format */
  format?: string;
  
  /** Output directory */
  outputDir?: string;
  
  /** Output filename (without extension) */
  filename?: string;
  
  /** Whether to download audio only */
  audioOnly?: boolean;
  
  /** Whether to download video only */
  videoOnly?: boolean;
  
  /** Audio format for conversion */
  audioFormat?: AudioFormat;
  
  /** Audio quality for conversion */
  audioQuality?: AudioQuality;
  
  /** Whether to keep original file after conversion */
  keepOriginal?: boolean;
  
  /** Custom headers for download */
  headers?: Record<string, string>;
  
  /** Maximum download speed in bytes/second */
  maxSpeed?: number;
  
  /** Number of download retries */
  retries?: number;
  
  /** Progress callback */
  onProgress?: (progress: DownloadProgress) => void;
}

/**
 * Download progress information
 */
export interface DownloadProgress {
  /** Total file size in bytes */
  totalSize: number;
  
  /** Downloaded size in bytes */
  downloadedSize: number;
  
  /** Download percentage (0-100) */
  percentage: number;
  
  /** Download speed in bytes/second */
  speed: number;
  
  /** Estimated time remaining in seconds */
  eta: number;
  
  /** Current status */
  status: 'downloading' | 'converting' | 'completed' | 'error';
  
  /** Error message if status is 'error' */
  error?: string;
}

/**
 * Extraction result (legacy interface for compatibility)
 */
export interface ExtractResult {
  /** Title of the media */
  title: string;
  
  /** Description of the media */
  description: string;
  
  /** Duration in seconds */
  duration: number;
  
  /** Thumbnail URL */
  thumbnail?: string;
  
  /** Available streams */
  streams: StreamInfo[];
  
  /** Original URL */
  originalUrl: string;
}

/**
 * Extractor interface (legacy for compatibility)
 */
export interface Extractor {
  /** Extractor name */
  name: string;
  
  /** Test if URL is supported */
  test(url: string): boolean;
  
  /** Extract media information */
  extract(url: string): Promise<ExtractResult>;
}